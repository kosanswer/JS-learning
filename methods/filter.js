/*
Метод `filter()` является методом массива в JavaScript, который создает новый массив, 
содержащий все элементы исходного массива, прошедшие определенное условие, заданное в виде функции обратного вызова (callback).

Синтаксис метода `filter()` выглядит следующим образом:

```javascript
const newArray = array.filter(callback(element, index, array));
```

Где:
- `array` - исходный массив, для которого вызывается метод `filter()`.
- `callback` - функция обратного вызова, которая выполняется для каждого элемента массива и возвращает `true`, 
если элемент должен быть включен в новый массив, или `false`, если элемент должен быть исключен.
- `element` - текущий обрабатываемый элемент массива.
- `index` (необязательный) - индекс текущего обрабатываемого элемента.
- `array` (необязательный) - ссылка на исходный массив.

Вот пример использования метода `filter()`:

```javascript
const numbers = [1, 2, 3, 4, 5, 6];
const evenNumbers = numbers.filter(function (num) {
  return num % 2 === 0;
});

console.log(evenNumbers); // Выводит: [2, 4, 6]
```

В этом примере, мы создаем новый массив `evenNumbers`, содержащий только четные числа из исходного массива `numbers`. 
Функция обратного вызова проверяет каждый элемент массива и возвращает `true`, если число является четным (`num % 2 === 0`), или `false` в противном случае. 
Метод `filter()` возвращает новый массив, содержащий только те элементы, для которых функция обратного вызова возвращает `true`.

Метод `filter()` очень удобен, когда вам нужно отфильтровать элементы массива на основе определенного условия и создать новый массив, 
содержащий только подходящие элементы.
*/
